<?php
// $Id$

/**
 * @file
 *  provides node form panes for checkout in ubercart
 *
 */

/**
 * Implemenatation of hook_checkout_pane().
 */
function uc_checkout_nodepanes_checkout_pane() {
  $panes[] = array(
    'id' => 'nodepane',
    'callback' => '_uc_checkout_nodepane',
    'title' => t('Node Pane'),
    'desc' => t("Display an additional node form, to get associated with the order."),
    'weight' => 3,
    'collapsible' => TRUE,
  );
  return $panes;
}

/**
 * Implementation of hook_form_alter().
 *
 * Add additional validation and submission callbacks.
 */
function uc_checkout_nodepanes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    $form['#validate'][] = 'uc_checkout_nodepanes_checkout_form_validate';
    $form['#submit'][] = 'uc_checkout_nodepanes_checkout_form_submit';
  }
}

/**
 * Node pane checkout pane callback.
 */
function _uc_checkout_nodepane($op, &$arg1, $arg2 = NULL) {

  switch ($op) {
    case 'view':
      // Load pane form.
      $contents = _uc_checkout_nodepanes_nodepane_contents($arg1, $arg2);
      return array(
        'contents' => $contents,
      );
    case 'review':
      if (isset($arg1->order_id)) {
        $node = uc_checkout_nodepanes_get_node_for_order($arg1->order_id);
        if ($node) {
          $view = node_view($node, TRUE, TRUE, FALSE);
          return array(
            check_plain($node->title) => $view,
          );
        }
        else {
          return FALSE;
        }
      }

      return FALSE;
    case 'process':
      dpm(func_get_args());
      // node and relation to order_id is saved in
      // uc_checkout_nodepanes_checkout_form_submit().
      break;
  }
}

/**
 * Helper function to get nodepane form.
 */
function _uc_checkout_nodepanes_nodepane_contents(&$arg1, $arg2 = NULL) {
  GLOBAl $user;

  $order_id = $arg1->order_id;
  $node = uc_checkout_nodepanes_get_node_for_order($order_id);

  dpm($arg1, 'arg1');

  // Check if node is present
  if (!$node) {
    $type = 'page';
    $types = node_get_types();
    $type = isset($type) ? str_replace('-', '_', $type) : NULL;
    if (isset($types[$type]) && node_access('create', $type)) {
      $node = array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => '');
    }
  }
  // Check if user may update it.
  elseif (!node_access('update', $node)) {
    if (!node_access('view', $node)) {
      return array (
        '#value' => l($node->title, 'node/'. $node->nid),
      );
    }
    return FALSE;
  }
  else {
    $type = str_replace('-', '_', $node->type);
  }


  // If a node type has been specified, validate its existence.
  if ($node) {
    // Initialize settings:
    $form_state = array(
      'want form' => TRUE,
      'args' => array($node),
    );
    // node_form() must be available.
    module_load_include('inc', 'node', 'node.pages');
    //$node_form = drupal_retrieve_form($type .'_node_form', $form_state, $node);
    ctools_include('form');
    $node_form = ctools_build_form($type .'_node_form', $form_state);

    dpm($node_form);

    // Retrieve validation callbacks
    $validates = array();
    if (isset($node_form['buttons']['submit']['#validate'])) {
      $validates = array_merge($validates, $node_form['buttons']['submit']['#validate']);
    }
    if (isset($node_form['#validate'])) {
      $validates = array_merge($validates, $node_form['#validate']);
    }

    // Retrieve submit callbacks
    $submits = array();
    if (isset($node_form['buttons']['submit']['#submit'])) {
      $submits = array_merge($submits , $node_form['buttons']['submit']['#submit']);
    }
    if (isset($node_form['#submit'])) {
      $submits  = array_merge($submits , $node_form['#submit']);
    }

    // Remove buttons
    unset($node_form['buttons']);

    return array(
      'node_form' => $node_form,
      'order_id' => array('#type' => 'value', '#value' => $order_id),
      'validates' => array('#type' => 'value', '#value' => $validates),
      'submits' => array('#type' => 'value', '#value' => $submits),
    );

  }
  return FALSE;
}


/**
 * Additional validation function to process node form's validation.
 */
function uc_checkout_nodepanes_checkout_form_validate($form, &$form_state) {

  // Process the node form only.
  $node_form_state = $form_state;
  $node_form_state['values'] = $form_state['values']['panes']['nodepane']['node_form'];
  $node_form = $form['panes']['nodepane']['node_form'];
  $validates = $form_state['values']['panes']['nodepane']['validates'];

  // Run each validation with only node form.
  if ($validates && is_array($validates)) {
    foreach ($validates as $validate) {
      if (function_exists($validate)) {
        $validate($node_form, $node_form_state);
      }
    }
  }

  // Put back eventually changed values.
  $form_state['values']['panes']['nodepane']['node_form'] = $node_form_state['values'];
}

/**
 * Additional submission function to process node_form's submisions.
 */
function uc_checkout_nodepanes_checkout_form_submit($form, &$form_state) {

  // Process the node form only.
  $node_form_state = $form_state;
  $node_form_state['values'] = $form_state['values']['panes']['nodepane']['node_form'];
  $node_form = $form['panes']['nodepane']['node_form'];
  $submits = $form_state['values']['panes']['nodepane']['submits'];

  // Run each submit with only node form.
  if ($submits && is_array($submits)) {
    foreach ($submits as $submit) {
      if (function_exists($submit)) {
        $submit($node_form, $node_form_state);
      }
    }
  }

  // Put back eventually changed values.
  $form_state['values']['panes']['nodepane']['node_form'] = $node_form_state['values'];

  // Store order -> node relation.
  $order_id = $form_state['values']['panes']['nodepane']['order_id'];
  $nid = $node_form_state['nid'];

  dpm(func_get_args());
  if ($order_id && $nid) {
    uc_checkout_nodepanes_set_node_for_order($order_id, $nid);
  }
}

/**
 * Helper function to retrieve the node for an ubercart order.
 */
function uc_checkout_nodepanes_get_node_for_order($order_id) {

  $query = 'SELECT nid FROM {uc_checkout_nodepanes} WHERE order_id = %d';
  $nid = db_result(db_query($query, $order_id));

  if ($nid) {
    $node = node_load($nid);
    return $node;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to write to {uc_checkout_nodepanes}.
 */
function uc_checkout_nodepanes_set_node_for_order($order_id, $nid) {
  $query = 'REPLACE INTO {uc_checkout_nodepanes} (order_id, nid) VALUES (%d, %d)';

  db_query($query, $order_id, $nid);
}