<?php
// $Id$

/**
 * @file
 *   implementation of new menu special indentifiers for custom breadcrumbs
 */

/**
 * Implementation of hook_cb_identifiers_info().
 */
function cb_menuidentifier_cb_identifiers_info() {
  $identifiers = array();
  $identifiers['<parent-menu-trail>'] = array(
    'title' => t('Parent menu'),
    'help' => t('By prepending this identifier, the parent items for the given path is used as breadcrumb. That can be 0 to n items. Set the title for that to <none> as title line will be ignored for that output, because it will fetch the menu link titles.'),
    'callback' => 'cb_menuidentifier_pmt',
  );
  return $identifiers;
}


/**
 * Crumb item builder for identifier <parent-menu-trail>.
 */
function cb_menuidentifier_pmt($title, $path, $attributes, $identifier) {

  // Search for both alias and normal path
  $normal_path = drupal_get_normal_path($path);

  $query = "SELECT * FROM {menu_links} WHERE link_path IN ('%s', '%s')";
  $menu_item = db_fetch_object(db_query_range($query, $normal_path, $path, 0, 1));

  if ($menu_item) {
    $pids = array(
      $menu_item->plid,
      $menu_item->p1, $menu_item->p2, $menu_item->p3,
      $menu_item->p4, $menu_item->p5, $menu_item->p6,
      $menu_item->p7, $menu_item->p8, $menu_item->p9,
    );
    $pids = array_filter($pids);
    // return empty for no parents
    if (!count($pids)) return array();

    // replacement string
    $s = implode(', ',array_fill(0, count($pids), "'%s'"));
    $query = "SELECT * FROM {menu_links} WHERE mlid IN ($s)";
    $result = db_query($query, $pids);

    $trail = array();

    while($item = db_fetch_object($result)) {
      $i = array_search($item->mlid, $pids);
      $trail[$i] = array(
        'title' => $item->link_title,
        'href' => $item->link_path,
        'crumb' => l($item->link_title, $item->link_path, $attributes),
      );
    }
    return $trail;
  }
  // empty for no menu entry
  else {
    return array();
  }
}
